{"version":3,"sources":["App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","nameStyle","useSpring","config","mass","friction","damping","frequency","from","top","window","innerHeight","left","innerWidth","transform","fontSize","delay","fadeIn","opacity","className","p","style","span","Works","mediaendpoint","useState","works","setWorks","useEffect","axios","get","then","w","data","div","map","i","Work","work","src","image","alt","onClick","links","default","open","link","github","title","description","DevStatus","phase","MoreInfoLinks","Object","values","logo","filter","includes","background","color","message","App","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ed40b3cc.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { animated as a, useSpring } from \"react-spring\";\n\nimport axios from \"axios\";\n\nimport \"./css/home.css\";\n\nimport myworks from \"./works\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nconst Home = () => {\n  const nameStyle = useSpring({\n    config: { mass: 1, friction: 10, damping: 1, frequency: 0.6 },\n    from: {\n      top: window.innerHeight / 2 - 40,\n      left: window.innerWidth / 2 - 40,\n      transform: \"translate(-50%, -50%)\",\n      fontSize: \"3rem\",\n    },\n    top: 0,\n    left: 0,\n    transform: \"translate(0,0)\",\n    fontSize: \"2rem\",\n    delay: 1000,\n  });\n\n  const fadeIn = useSpring({\n    from: {\n      opacity: 0,\n    },\n    opacity: 1,\n    delay: 1500,\n  });\n\n  return (\n    <>\n      <div className=\"home\">\n        <nav>\n          <div className=\"left\">\n            <a.p style={nameStyle} className=\"name\">\n              Raj Sharma\n            </a.p>\n            <a.span style={fadeIn} className=\"subtitle\">\n              ARTIST\n            </a.span>\n          </div>\n        </nav>\n        <Works fadeIn={fadeIn} />\n      </div>\n    </>\n  );\n};\n\nconst mediaendpoint =\n  process.env.NODE_ENV === \"production\"\n    ? \"https://evve.herokuapp.com/media\"\n    : \"http://localhost:8000/media\";\nfunction Works({ fadeIn }) {\n  const [works, setWorks] = useState([]);\n\n  useEffect(() => {\n    axios.get(mediaendpoint + \"/works.json\").then((w) => setWorks(w.data));\n  }, []);\n\n  return (\n    <a.div style={fadeIn} className=\"works\">\n      <p className=\"work-title\">My Works</p>\n      <div className=\"work-videos\">\n        {works.map((w, i) => (\n          <Work work={w} key={i} />\n        ))}\n      </div>\n    </a.div>\n  );\n}\n\nfunction Work({ work }) {\n  return (\n    <div className=\"work\">\n      <div className=\"cover-img\">\n        <img src={mediaendpoint + work.image} alt=\"\" />\n      </div>\n      <div className=\"about\">\n        <span\n          className=\"title\"\n          onClick={() => {\n            work.links &&\n              (work.links.default\n                ? window.open(work.links.default.link)\n                : window.open(work.links.github.link));\n          }}\n        >\n          {work.title}\n        </span>\n        <span className=\"description\">{work.description}</span>\n        <DevStatus phase={work.phase} />\n        {work.links ? <MoreInfoLinks links={work.links} /> : \"\"}\n      </div>\n    </div>\n  );\n}\n\nfunction MoreInfoLinks({ links }) {\n  links = { ...links };\n  delete links.default;\n  return (\n    <div className=\"more-info\">\n      {Object.values(links).map((link, i) =>\n        link ? (\n          <img\n            onClick={() => window.open(link.link)}\n            className=\"link-logo\"\n            key={i}\n            src={link.logo}\n            alt=\"\"\n            style={{\n              filter: link.link.includes(\"github.com\") ? \"invert(1)\" : \"\",\n            }}\n          />\n        ) : (\n          \"\"\n        )\n      )}\n    </div>\n  );\n}\n\nfunction DevStatus({ phase }) {\n  return (\n    <div className=\"dev-status\">\n      <div className=\"indicator\" style={{ background: phase.color }} />\n      <span style={{ color: phase.color }}>{phase.message}</span>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}